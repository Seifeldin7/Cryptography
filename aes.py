

s_box = (
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
)

inv_s_box = (
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
)

r_con = (
    0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
    0x80, 0x1B, 0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A,
    0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97, 0x35, 0x6A,
    0xD4, 0xB3, 0x7D, 0xFA, 0xEF, 0xC5, 0x91, 0x39,
)

mul_matrix = [
    (0x02, 0x03, 0x01, 0x01),
    (0x01, 0x02, 0x03, 0x01),
    (0x01, 0x01, 0x02, 0x03),
    (0x03, 0x01, 0x01, 0x02)
]


inv_mul_matrix = [
    (0x0E, 0x0B, 0x0D, 0x09),
    (0x09, 0x0E, 0x0B, 0x0D),
    (0x0D, 0x09, 0x0E, 0x0B),
    (0x0B, 0x0D, 0x09, 0x0E)
]
w = []
plain = []


def rot_word(word):
    first_part = word[0]
    word[0:3] = word[1:4]
    word[3] = first_part
    return word


def key_expand(key):
    w[0:4] = partition_line(key, 8)
    for i in range(0, 4):
        w[i] = get_key_part(i)

    for i in range(4, 44):
        w.append(get_key_part(i))


def substitute_s_box(byte):
    first_byte = (byte >> (8 * 0)) & 0xFF
    second_byte = (byte >> (8 * 1)) & 0xFF
    res = s_box[((second_byte*16)+first_byte)]
    return res


def inv_substitute_s_box(byte):
    first_byte = (byte >> (8 * 0)) & 0xFF
    second_byte = (byte >> (8 * 1)) & 0xFF
    res = inv_s_box[((second_byte*16)+first_byte)]
    return res

def partition_line(line, n):
    return [line[i:i + n] for i in range(0, len(line), n)]


def xor_lists(list1, list2):
    res = []
    for j in range(0, 4):
        res.append(list1[j] ^ list2[j])
    return res


def get_key_part(i):
    if i < 4:
        wi = partition_line(w[i], 2)
        for j in range(0, 4):
            wi[j] = int(wi[j], 16)
        return wi
    if i % 4 == 0:
        key_part = aux_fun(i-1)
        return xor_lists(w[i - 4], key_part)
    else:
        return xor_lists(w[i-1], w[i-4])


count = 1

def aux_fun(i):
    global count
    z = rot_word(w[i][:])

    for j in range(0, 4):
        z[j] = substitute_s_box(z[j])
    z[0] = z[0] ^ r_con[count]
    count += 1
    return z


def shift_rows(s):
    s[1] = s[1][1:] + s[1][:1]
    s[2] = s[2][2:] + s[2][:2]
    s[3] = s[3][3:] + s[3][:3]


def inv_shift_rows(s):
    s[1] = s[1][3:] + s[1][:3]
    s[2] = s[2][2:] + s[2][:2]
    s[3] = s[3][1:] + s[3][:1]


def mul_28_field(a, b):
    if b == 1:
        return a
    elif b == 2:
        if a & 0x80:
            return ((a << 1) & 0xFF) ^ 0x1B
        else:
            return (a << 1) & 0xFF
    elif b == 3:
        return mul_28_field(a, 2) ^ a
    elif b == 9:
        return mul_28_field(mul_28_field(mul_28_field(a, 2), 2), 2) ^ a
    elif b == 0x0B:
        return mul_28_field((mul_28_field(mul_28_field(a, 2), 2) ^ a), 2) ^ a
    elif b == 0x0D:
        return mul_28_field(mul_28_field((mul_28_field(a, 2) ^ a), 2), 2) ^ a
    else:
        return mul_28_field((mul_28_field((mul_28_field(a, 2) ^ a), 2) ^ a), 2)


def mix_byte(m, col_no, row_no, inv_flag):
    if inv_flag:
        res = mul_28_field(m[0][col_no], inv_mul_matrix[row_no][0])
        for i in range(1, 4):
            res ^= mul_28_field(m[i][col_no], inv_mul_matrix[row_no][i])
    else:
        res = mul_28_field(m[0][col_no], mul_matrix[row_no][0])
        for i in range(1, 4):
            res ^= mul_28_field(m[i][col_no], mul_matrix[row_no][i])
    return res


def mix_columns(m, inv_flag):
    temp_col = []
    temp_mat = []
    for col in range(4):
        for row in range(4):
            temp_col.append(mix_byte(m, col, row, inv_flag))
        temp_mat.append(temp_col)
        temp_col = []
    plain_transpose = [*zip(*temp_mat)]
    for i in range(0, 4):
        plain_transpose[i] = list(plain_transpose[i])
    return plain_transpose

def xor_with_key(plain,key):
    for i in range(4):
       plain[i] = xor_lists(plain[i], key[i])

def transform_txt_to_bytes(plain):
    for i in range(4):
        for j in range(4):
            plain[i][j] = (int((plain[i][j])[0], 16)*16)+int((plain[i][j])[1],16)

def transpose_plain(plain):
    for i in range(1, 4):
        plain[(4 * i - 4):4 * i] = [*zip(*plain[(4 * i - 4):4 * i])]
        for i in range(4):
            plain[i] = list(plain[i])


def plain_arr_to_txt(plain_arr):
    res = ''
    for i in range(4):
        for j in range(4):
            tmp = hex(plain_arr[i][j])[2:]
            if len(tmp) == 1:
                res += '0' + hex(plain_arr[i][j])[2:]
            else:
                res += hex(plain_arr[i][j])[2:]
    return res
#plain_text = input("Enter the plain text\n")

#key = input("Enter the key\n")
key = '0f1571c947d9e8590cb7add6af7f6798'
encrypt = False
key_expand(key)
for i in range(1, 12):
    w[(4 * i - 4):4 * i] = [*zip(*w[(4 * i - 4):4 * i])]
    for i in range((4 * i - 4), 4 * i):
        w[i] = list(w[i])
plain_txt = 'ff0b844a0853bf7c6934ab4364148fb9'
plain[0:4] = partition_line(plain_txt, 8)


for i in range(0, 4):
    plain[i] = partition_line(plain[i], 2)

transpose_plain(plain)

transform_txt_to_bytes(plain)
if encrypt:
    xor_with_key(plain, w[0:4])
    for k in range(2, 12):

        for i in range(0, 4):
            for j in range(0, 4):
               plain[i][j] = substitute_s_box(plain[i][j])
        shift_rows(plain)
        if k != 11:
             plain = mix_columns(plain, 0)
        xor_with_key(plain, w[((4 * k) - 4):4 * k])

    transpose_plain(plain)
    print(plain_arr_to_txt(plain))
else:
    xor_with_key(plain, w[40:44])

    inv_shift_rows(plain)

    for i in range(0, 4):
        for j in range(0, 4):
            plain[i][j] = inv_substitute_s_box(plain[i][j])
    for k in range(10, 1, -1):
        xor_with_key(plain, w[((4 * k) - 4):4 * k])
        plain = mix_columns(plain, 1)
        inv_shift_rows(plain)
        for i in range(0, 4):
            for j in range(0, 4):
               plain[i][j] = inv_substitute_s_box(plain[i][j])
    xor_with_key(plain, w[0:4])
    transpose_plain(plain)

    print(plain_arr_to_txt(plain))



